#version 450
#extension GL_EXT_mesh_shader : require

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;
layout(triangles) out;
layout(max_vertices=8, max_primitives=4) out;

layout(row_major) layout(binding = 0) uniform Camera
{
  mat4 worldToClip;
  mat4 worldToView;
  mat4 viewToClip;
  mat4 clipToView;
  mat4 viewToWorld;
  mat4 clipToWorld;
} camera;

layout (location = 0) out PerVertexData
{
  vec3 color;
  vec2 texCoord;
} v_out[];

struct Vertex 
{
  vec3 pos;
  vec3 color;
  vec2 texCoord;
};

uint vertices_num = 8;
uint indices_num = 4;

Vertex vertices[] = {
  {vec3(-0.5, -0.5, 0.0), vec3(1.0, 0.0, 0.0), vec2(1.0, 0.0)},
  {vec3(0.5, -0.5, 0.0), vec3(0.0, 1.0, 0.0), vec2(0.0, 0.0)},
  {vec3(0.5, 0.5, 0.0), vec3(0.0, 0.0, 1.0), vec2(0.0, 1.0)},
  {vec3(-0.5, 0.5, 0.0), vec3(1.0, 1.0, 0.0), vec2(1.0, 1.0)},
  
  {vec3(-0.5, -0.5, -0.5), vec3(1.0, 0.0, 0.0), vec2(1.0, 0.0)},
  {vec3(0.5, -0.5, -0.5), vec3(0.0, 1.0, 0.0), vec2(0.0, 0.0)},
  {vec3(0.5, 0.5, -0.5), vec3(0.0, 0.0, 1.0), vec2(0.0, 1.0)},
  {vec3(-0.5, 0.5, -0.5), vec3(1.0, 1.0, 0.0), vec2(1.0, 1.0)}
};

uvec3 indices[] = 
{
  uvec3(0, 1, 2),
  uvec3(2, 3, 0),
  uvec3(4, 5, 6), 
  uvec3(6, 7, 4)
};

void main()
{
  SetMeshOutputsEXT(8, 4);
  for (uint i = 0; i < vertices_num; ++i)
  {
    gl_MeshVerticesEXT[i].gl_Position = vec4(vertices[i].pos, 1.0) * camera.worldToView * camera.viewToClip;
    v_out[i].color = vertices[i].color;
    v_out[i].texCoord = vertices[i].texCoord;
  }

  for (uint i = 0; i < indices_num; i++)
  {
    gl_PrimitiveTriangleIndicesEXT[i] =  uvec3(indices[i].x, indices[i].y, indices[i].z);
  }
}
