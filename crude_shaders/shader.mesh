#version 450
#extension GL_EXT_mesh_shader : require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require

const uint cMaxMeshWorkGroupSize    = 128;
const uint cMaxVerticesPerMeshlet   = 64;
const uint cMaxPrimitivesPerMeshlet = 124;

layout(local_size_x=cMaxMeshWorkGroupSize, local_size_y=1, local_size_z=1) in;
layout(triangles) out;
layout(max_vertices=cMaxVerticesPerMeshlet, max_primitives=cMaxPrimitivesPerMeshlet) out;

struct Meshlet
{
  uint8_t  vertexCount;
  uint8_t  primitiveCount;
  uint     vertexOffset;
  uint     primitiveOffest;
};

struct Vertex
{
  vec3 position;
  vec3 normal;
  vec2 texCoord;
};

struct Mesh_Lod
{
  uint indexOffset;
  uint indexCount;
  uint meshletOffset;
  uint meshletCount;
};

struct Mesh
{
  uint vertexOffset;
  uint vertexCount;
  uint lodCount;
  Mesh_Lod lods[8];
};

struct Camera
{
  mat4 worldToClip;
  mat4 worldToView;
  mat4 viewToClip;
  mat4 clipToView;
  mat4 viewToWorld;
  mat4 clipToWorld;
};

layout(binding=0, std140, row_major) uniform Per_Frame
{
  Camera camera;
};

struct MeshDraw
{
  mat4 meshToModel;
};

layout(binding=1, std140, row_major) readonly buffer Draws
{
  MeshDraw meshDraws[];
};

layout(binding=2) readonly buffer Meshlets
{
  Meshlet meshlets[];
};

layout(binding=3, std140) readonly buffer Vertices
{
  Vertex vertices[];
};

layout(binding=4) readonly buffer PrimitiveIndices
{
  uint8_t primitiveIndices[];
};

layout(binding=5) readonly buffer VertexIndices
{
  uint vertexIndices[];
};

layout(location=0) out PerVertexData {
  vec3 color;
  vec2 texCoord;
} v_out[];

void main()
{
  const uint groupIndex = gl_WorkGroupID.x;
  const uint groupThreadIndex = gl_LocalInvocationID.x;
  
  const uint meshletIndex = groupIndex;

  const uint vertexCount = uint(meshlets[meshletIndex].vertexCount);
  const uint primitiveCount = uint(meshlets[meshletIndex].primitiveCount);

  SetMeshOutputsEXT(vertexCount, primitiveCount);
  
  if (groupThreadIndex < vertexCount)
  {
    const uint vertexOffset = uint(meshlets[meshletIndex].vertexOffset);
    const uint vertexIndex = vertexIndices[groupThreadIndex + vertexOffset];
    
    gl_MeshVerticesEXT[groupThreadIndex].gl_Position = vec4(vertices[vertexIndex].position, 1.0) * meshDraws[0].meshToModel * camera.worldToView * camera.viewToClip;
    v_out[groupThreadIndex].color = vec3(1.0, 1.0, 1.0);
    v_out[groupThreadIndex].texCoord = vertices[vertexIndex].texCoord;
  }

  if (groupThreadIndex < primitiveCount)
  {
    const uint primitiveOffest = uint(3 * groupThreadIndex + meshlets[meshletIndex].primitiveOffest);
    gl_PrimitiveTriangleIndicesEXT[groupThreadIndex] = uvec3(primitiveIndices[primitiveOffest], primitiveIndices[primitiveOffest + 1], primitiveIndices[primitiveOffest + 2]);
  }
}
